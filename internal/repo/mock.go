// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repo/repo.go

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	family "github.com/ricardomgoncalves/truphone_ta_go/pkg/family"
	reflect "reflect"
)

// MockFamilyRepo is a mock of FamilyRepo interface
type MockFamilyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFamilyRepoMockRecorder
}

// MockFamilyRepoMockRecorder is the mock recorder for MockFamilyRepo
type MockFamilyRepoMockRecorder struct {
	mock *MockFamilyRepo
}

// NewMockFamilyRepo creates a new mock instance
func NewMockFamilyRepo(ctrl *gomock.Controller) *MockFamilyRepo {
	mock := &MockFamilyRepo{ctrl: ctrl}
	mock.recorder = &MockFamilyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFamilyRepo) EXPECT() *MockFamilyRepoMockRecorder {
	return m.recorder
}

// CreateFamily mocks base method
func (m *MockFamilyRepo) CreateFamily(ctx context.Context, fam family.Family) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFamily", ctx, fam)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFamily indicates an expected call of CreateFamily
func (mr *MockFamilyRepoMockRecorder) CreateFamily(ctx, fam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFamily", reflect.TypeOf((*MockFamilyRepo)(nil).CreateFamily), ctx, fam)
}

// GetFamilyById mocks base method
func (m *MockFamilyRepo) GetFamilyById(ctx context.Context, id string) (*family.Family, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFamilyById", ctx, id)
	ret0, _ := ret[0].(*family.Family)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFamilyById indicates an expected call of GetFamilyById
func (mr *MockFamilyRepoMockRecorder) GetFamilyById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFamilyById", reflect.TypeOf((*MockFamilyRepo)(nil).GetFamilyById), ctx, id)
}

// ListFamilies mocks base method
func (m *MockFamilyRepo) ListFamilies(ctx context.Context, opts ...FilterOption) ([]family.Family, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFamilies", varargs...)
	ret0, _ := ret[0].([]family.Family)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFamilies indicates an expected call of ListFamilies
func (mr *MockFamilyRepoMockRecorder) ListFamilies(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFamilies", reflect.TypeOf((*MockFamilyRepo)(nil).ListFamilies), varargs...)
}

// UpdateFamilyById mocks base method
func (m *MockFamilyRepo) UpdateFamilyById(ctx context.Context, id string, fam family.Family) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFamilyById", ctx, id, fam)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFamilyById indicates an expected call of UpdateFamilyById
func (mr *MockFamilyRepoMockRecorder) UpdateFamilyById(ctx, id, fam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFamilyById", reflect.TypeOf((*MockFamilyRepo)(nil).UpdateFamilyById), ctx, id, fam)
}

// DeleteFamilyById mocks base method
func (m *MockFamilyRepo) DeleteFamilyById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFamilyById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFamilyById indicates an expected call of DeleteFamilyById
func (mr *MockFamilyRepoMockRecorder) DeleteFamilyById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFamilyById", reflect.TypeOf((*MockFamilyRepo)(nil).DeleteFamilyById), ctx, id)
}

// MockMemberRepo is a mock of MemberRepo interface
type MockMemberRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMemberRepoMockRecorder
}

// MockMemberRepoMockRecorder is the mock recorder for MockMemberRepo
type MockMemberRepoMockRecorder struct {
	mock *MockMemberRepo
}

// NewMockMemberRepo creates a new mock instance
func NewMockMemberRepo(ctrl *gomock.Controller) *MockMemberRepo {
	mock := &MockMemberRepo{ctrl: ctrl}
	mock.recorder = &MockMemberRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMemberRepo) EXPECT() *MockMemberRepoMockRecorder {
	return m.recorder
}

// CreateMember mocks base method
func (m *MockMemberRepo) CreateMember(ctx context.Context, member family.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMember indicates an expected call of CreateMember
func (mr *MockMemberRepoMockRecorder) CreateMember(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockMemberRepo)(nil).CreateMember), ctx, member)
}

// GetMemberById mocks base method
func (m *MockMemberRepo) GetMemberById(ctx context.Context, id string) (*family.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberById", ctx, id)
	ret0, _ := ret[0].(*family.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberById indicates an expected call of GetMemberById
func (mr *MockMemberRepoMockRecorder) GetMemberById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberById", reflect.TypeOf((*MockMemberRepo)(nil).GetMemberById), ctx, id)
}

// ListMembers mocks base method
func (m *MockMemberRepo) ListMembers(ctx context.Context, options ...FilterOption) ([]family.Member, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembers", varargs...)
	ret0, _ := ret[0].([]family.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers
func (mr *MockMemberRepoMockRecorder) ListMembers(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockMemberRepo)(nil).ListMembers), varargs...)
}

// UpdateMemberById mocks base method
func (m *MockMemberRepo) UpdateMemberById(ctx context.Context, id string, member family.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemberById", ctx, id, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMemberById indicates an expected call of UpdateMemberById
func (mr *MockMemberRepoMockRecorder) UpdateMemberById(ctx, id, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberById", reflect.TypeOf((*MockMemberRepo)(nil).UpdateMemberById), ctx, id, member)
}

// DeleteMemberById mocks base method
func (m *MockMemberRepo) DeleteMemberById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMemberById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMemberById indicates an expected call of DeleteMemberById
func (mr *MockMemberRepoMockRecorder) DeleteMemberById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemberById", reflect.TypeOf((*MockMemberRepo)(nil).DeleteMemberById), ctx, id)
}
